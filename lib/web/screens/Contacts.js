function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import React from'react';import StyleSheet from"react-native-web/dist/exports/StyleSheet";import Text from"react-native-web/dist/exports/Text";import View from"react-native-web/dist/exports/View";import SafeAreaView from"react-native-web/dist/exports/SafeAreaView";import Platform from"react-native-web/dist/exports/Platform";import Image from"react-native-web/dist/exports/Image";import FlatList from"react-native-web/dist/exports/FlatList";import ScrollView from"react-native-web/dist/exports/ScrollView";import Button from"react-native-web/dist/exports/Button";import{connect}from'react-redux';import HeadBar from"../molecules/headbar";import Footer from"../molecules/footer";import ContactsBackground from"../packages/Contacts";import{collections,account,explore}from"../assets/icons";import NativeEventEmitter from"react-native-web/dist/exports/NativeEventEmitter";import{handleOnContactsSyncComplete}from"../services/background";import{clearAllContacts}from"../actions/contacts";class Contacts extends React.Component{constructor(props){super(props);_defineProperty(this,"footerNav",void 0);this.footerNav=[{id:"1",icon:explore,text:"Explore"},{id:"2",icon:collections,text:"Collections"},{id:"3",icon:account,text:"Account"}];}componentDidMount(){const eventEmitter=new NativeEventEmitter(ContactsBackground);console.log(eventEmitter);eventEmitter.addListener('onContactsSyncComplete',handleOnContactsSyncComplete.bind(null,this.props.store));const epochSeconds=Date.now()/1000;const timeDiff=this.props.lastSync-epochSeconds;if(timeDiff<5*60||this.props.contactList.length>0){// Sync Again using Services
}}extractKey({item,index}){if(item){const name=item.name?item.name:"";const phone=item.phone?item.phone:"";const id=name+phone;return id;}}getAllContacts(){console.log("Started sync",Date.now());ContactsBackground.getAllContacts();}clearAllContacts(){this.props.clearAllContacts();}renderContact({item,index}){return React.createElement(View,{style:styles.item},React.createElement(Image,{style:styles.profilePic,source:{uri:item.profilePic}}),React.createElement(View,{style:styles.item_detail},React.createElement(Text,{style:styles.name},item.name),React.createElement(Text,{style:styles.phone},item.phone)));}getList(){if(Platform.OS==="web"){return React.createElement(Text,{style:styles.centerText},"Contacts syncing is not available on web.");}return React.createElement(FlatList,{data:this.props.contactList,renderItem:this.renderContact,keyExtractor:this.extractKey});}render(){// console.log(this.props);
return React.createElement(SafeAreaView,{style:styles.container},React.createElement(HeadBar,null),React.createElement(ScrollView,null,React.createElement(View,{style:styles.container},this.getList()),React.createElement(Button,{title:"Delete All",onPress:this.clearAllContacts.bind(this)}),React.createElement(Button,{title:"Get All",onPress:this.getAllContacts})),React.createElement(Footer,{items:this.footerNav,active:"1"}));}}const styles=StyleSheet.create({container:{flex:1,height:'100%',width:'100%'},item:{},centerText:{flex:1,textAlign:"center",alignSelf:"center"},item_detail:{},name:{},phone:{},profilePic:{}});const mapStateToProps=({contacts})=>({contactList:contacts.list,lastSync:contacts.lastSync});const mapDispatchToProps={clearAllContacts};export default connect(mapStateToProps,mapDispatchToProps)(Contacts);