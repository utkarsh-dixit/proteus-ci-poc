{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { COUNTER_CHANGE } from '../constants';\nimport { ADD_BANNERS } from \"../actions/city\";\nconst initialState = {\n  banners: []\n};\nexport const city = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_BANNERS:\n      return _objectSpread({}, state, {\n        banners: action.banners\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/utkarsh/Desktop/headout/ReactNativeOne/packages/components/src/reducers/cityReducer.js"],"names":["ADD_BANNERS","initialState","banners","city","state","action","type"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAASA,WAAT,QAA4B,iBAA5B;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AADQ,CAArB;AAIA,OAAO,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,WAAL;AACI,+BACOI,KADP;AAEIF,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAFpB;;AAIJ;AACI,aAAOE,KAAP;AAPR;AASH,CAVM","sourcesContent":["// import { COUNTER_CHANGE } from '../constants';\nimport { ADD_BANNERS } from \"../actions/city\";\n\n\nconst initialState = {\n    banners: [\n    ]\n};\nexport const city = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_BANNERS:\n            return {\n                ...state,\n                banners: action.banners\n            };\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}