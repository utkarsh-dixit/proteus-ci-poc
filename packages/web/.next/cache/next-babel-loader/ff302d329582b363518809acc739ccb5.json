{"ast":null,"code":"\"use strict\";\n/***\n * Recycle pool for maintaining recyclable items, supports segregation by type as well.\n * Availability check, add/remove etc are all O(1), uses two maps to achieve constant time operation\n */\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RecycleItemPool =\n/** @class */\nfunction () {\n  function RecycleItemPool() {\n    this._recyclableObjectMap = {};\n    this._availabilitySet = {};\n  }\n\n  RecycleItemPool.prototype.putRecycledObject = function (objectType, object) {\n    objectType = this._stringify(objectType);\n\n    var objectSet = this._getRelevantSet(objectType);\n\n    if (!this._availabilitySet[object]) {\n      objectSet[object] = null;\n      this._availabilitySet[object] = objectType;\n    }\n  };\n\n  RecycleItemPool.prototype.getRecycledObject = function (objectType) {\n    objectType = this._stringify(objectType);\n\n    var objectSet = this._getRelevantSet(objectType);\n\n    var recycledObject;\n\n    for (var property in objectSet) {\n      if (objectSet.hasOwnProperty(property)) {\n        recycledObject = property;\n        break;\n      }\n    }\n\n    if (recycledObject) {\n      delete objectSet[recycledObject];\n      delete this._availabilitySet[recycledObject];\n    }\n\n    return recycledObject;\n  };\n\n  RecycleItemPool.prototype.removeFromPool = function (object) {\n    if (this._availabilitySet[object]) {\n      delete this._getRelevantSet(this._availabilitySet[object])[object];\n      delete this._availabilitySet[object];\n      return true;\n    }\n\n    return false;\n  };\n\n  RecycleItemPool.prototype.clearAll = function () {\n    this._recyclableObjectMap = {};\n    this._availabilitySet = {};\n  };\n\n  RecycleItemPool.prototype._getRelevantSet = function (objectType) {\n    var objectSet = this._recyclableObjectMap[objectType];\n\n    if (!objectSet) {\n      objectSet = {};\n      this._recyclableObjectMap[objectType] = objectSet;\n    }\n\n    return objectSet;\n  };\n\n  RecycleItemPool.prototype._stringify = function (objectType) {\n    if (typeof objectType === \"number\") {\n      objectType = objectType.toString();\n    }\n\n    return objectType;\n  };\n\n  return RecycleItemPool;\n}();\n\nexports.default = RecycleItemPool;","map":{"version":3,"sources":["../../../src/utils/RecycleItemPool.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;AAQA,IAAA,eAAA;AAAA;AAAA,YAAA;AAII,WAAA,eAAA,GAAA;AACI,SAAK,oBAAL,GAA4B,EAA5B;AACA,SAAK,gBAAL,GAAwB,EAAxB;AACH;;AAEM,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,UAAzB,EAAsD,MAAtD,EAAoE;AAChE,IAAA,UAAU,GAAG,KAAK,UAAL,CAAgB,UAAhB,CAAb;;AACA,QAAM,SAAS,GAAG,KAAK,eAAL,CAAqB,UAArB,CAAlB;;AACA,QAAI,CAAC,KAAK,gBAAL,CAAsB,MAAtB,CAAL,EAAoC;AAChC,MAAA,SAAS,CAAC,MAAD,CAAT,GAAoB,IAApB;AACA,WAAK,gBAAL,CAAsB,MAAtB,IAAgC,UAAhC;AACH;AACJ,GAPM;;AASA,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,UAAzB,EAAoD;AAChD,IAAA,UAAU,GAAG,KAAK,UAAL,CAAgB,UAAhB,CAAb;;AACA,QAAM,SAAS,GAAG,KAAK,eAAL,CAAqB,UAArB,CAAlB;;AACA,QAAI,cAAJ;;AACA,SAAK,IAAM,QAAX,IAAuB,SAAvB,EAAkC;AAC9B,UAAI,SAAS,CAAC,cAAV,CAAyB,QAAzB,CAAJ,EAAwC;AACpC,QAAA,cAAc,GAAG,QAAjB;AACA;AACH;AACJ;;AAED,QAAI,cAAJ,EAAoB;AAChB,aAAO,SAAS,CAAC,cAAD,CAAhB;AACA,aAAO,KAAK,gBAAL,CAAsB,cAAtB,CAAP;AACH;;AACD,WAAO,cAAP;AACH,GAhBM;;AAkBA,EAAA,eAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,MAAtB,EAAoC;AAChC,QAAI,KAAK,gBAAL,CAAsB,MAAtB,CAAJ,EAAmC;AAC/B,aAAO,KAAK,eAAL,CAAqB,KAAK,gBAAL,CAAsB,MAAtB,CAArB,EAAoD,MAApD,CAAP;AACA,aAAO,KAAK,gBAAL,CAAsB,MAAtB,CAAP;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAPM;;AASA,EAAA,eAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,SAAK,oBAAL,GAA4B,EAA5B;AACA,SAAK,gBAAL,GAAwB,EAAxB;AACH,GAHM;;AAKC,EAAA,eAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,UAAxB,EAA0C;AACtC,QAAI,SAAS,GAAG,KAAK,oBAAL,CAA0B,UAA1B,CAAhB;;AACA,QAAI,CAAC,SAAL,EAAgB;AACZ,MAAA,SAAS,GAAG,EAAZ;AACA,WAAK,oBAAL,CAA0B,UAA1B,IAAwC,SAAxC;AACH;;AACD,WAAO,SAAP;AACH,GAPO;;AASA,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,UAAnB,EAA8C;AAC1C,QAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAChC,MAAA,UAAU,GAAG,UAAU,CAAC,QAAX,EAAb;AACH;;AACD,WAAO,UAAP;AACH,GALO;;AAMZ,SAAA,eAAA;AAAC,CAjED,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/***\n * Recycle pool for maintaining recyclable items, supports segregation by type as well.\n * Availability check, add/remove etc are all O(1), uses two maps to achieve constant time operation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RecycleItemPool = /** @class */ (function () {\n    function RecycleItemPool() {\n        this._recyclableObjectMap = {};\n        this._availabilitySet = {};\n    }\n    RecycleItemPool.prototype.putRecycledObject = function (objectType, object) {\n        objectType = this._stringify(objectType);\n        var objectSet = this._getRelevantSet(objectType);\n        if (!this._availabilitySet[object]) {\n            objectSet[object] = null;\n            this._availabilitySet[object] = objectType;\n        }\n    };\n    RecycleItemPool.prototype.getRecycledObject = function (objectType) {\n        objectType = this._stringify(objectType);\n        var objectSet = this._getRelevantSet(objectType);\n        var recycledObject;\n        for (var property in objectSet) {\n            if (objectSet.hasOwnProperty(property)) {\n                recycledObject = property;\n                break;\n            }\n        }\n        if (recycledObject) {\n            delete objectSet[recycledObject];\n            delete this._availabilitySet[recycledObject];\n        }\n        return recycledObject;\n    };\n    RecycleItemPool.prototype.removeFromPool = function (object) {\n        if (this._availabilitySet[object]) {\n            delete this._getRelevantSet(this._availabilitySet[object])[object];\n            delete this._availabilitySet[object];\n            return true;\n        }\n        return false;\n    };\n    RecycleItemPool.prototype.clearAll = function () {\n        this._recyclableObjectMap = {};\n        this._availabilitySet = {};\n    };\n    RecycleItemPool.prototype._getRelevantSet = function (objectType) {\n        var objectSet = this._recyclableObjectMap[objectType];\n        if (!objectSet) {\n            objectSet = {};\n            this._recyclableObjectMap[objectType] = objectSet;\n        }\n        return objectSet;\n    };\n    RecycleItemPool.prototype._stringify = function (objectType) {\n        if (typeof objectType === \"number\") {\n            objectType = objectType.toString();\n        }\n        return objectType;\n    };\n    return RecycleItemPool;\n}());\nexports.default = RecycleItemPool;\n//# sourceMappingURL=RecycleItemPool.js.map"]},"metadata":{},"sourceType":"script"}