{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$create = require(\"@babel/runtime-corejs2/core-js/object/create\");\n\nvar _Object$setPrototypeOf = require(\"@babel/runtime-corejs2/core-js/object/set-prototype-of\");\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = _Object$setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? _Object$create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ts_object_utils_1 = require(\"ts-object-utils\");\n/***\n * You can create a new instance or inherit and override default methods\n * Allows access to data and size. Clone with rows creates a new data provider and let listview know where to calculate row layout from.\n */\n\n\nvar BaseDataProvider =\n/** @class */\nfunction () {\n  function BaseDataProvider(rowHasChanged, getStableId) {\n    this._firstIndexToProcess = 0;\n    this._size = 0;\n    this._data = [];\n    this._hasStableIds = false;\n    this._requiresDataChangeHandling = false;\n    this.rowHasChanged = rowHasChanged;\n\n    if (getStableId) {\n      this.getStableId = getStableId;\n      this._hasStableIds = true;\n    } else {\n      this.getStableId = function (index) {\n        return index.toString();\n      };\n    }\n  }\n\n  BaseDataProvider.prototype.getDataForIndex = function (index) {\n    return this._data[index];\n  };\n\n  BaseDataProvider.prototype.getAllData = function () {\n    return this._data;\n  };\n\n  BaseDataProvider.prototype.getSize = function () {\n    return this._size;\n  };\n\n  BaseDataProvider.prototype.hasStableIds = function () {\n    return this._hasStableIds;\n  };\n\n  BaseDataProvider.prototype.requiresDataChangeHandling = function () {\n    return this._requiresDataChangeHandling;\n  };\n\n  BaseDataProvider.prototype.getFirstIndexToProcessInternal = function () {\n    return this._firstIndexToProcess;\n  }; //No need to override this one\n  //If you already know the first row where rowHasChanged will be false pass it upfront to avoid loop\n\n\n  BaseDataProvider.prototype.cloneWithRows = function (newData, firstModifiedIndex) {\n    var dp = this.newInstance(this.rowHasChanged, this.getStableId);\n    var newSize = newData.length;\n    var iterCount = Math.min(this._size, newSize);\n\n    if (ts_object_utils_1.ObjectUtil.isNullOrUndefined(firstModifiedIndex)) {\n      var i = 0;\n\n      for (i = 0; i < iterCount; i++) {\n        if (this.rowHasChanged(this._data[i], newData[i])) {\n          break;\n        }\n      }\n\n      dp._firstIndexToProcess = i;\n    } else {\n      dp._firstIndexToProcess = Math.max(Math.min(firstModifiedIndex, this._data.length), 0);\n    }\n\n    if (dp._firstIndexToProcess !== this._data.length) {\n      dp._requiresDataChangeHandling = true;\n    }\n\n    dp._data = newData;\n    dp._size = newSize;\n    return dp;\n  };\n\n  return BaseDataProvider;\n}();\n\nexports.BaseDataProvider = BaseDataProvider;\n\nvar DataProvider =\n/** @class */\nfunction (_super) {\n  __extends(DataProvider, _super);\n\n  function DataProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DataProvider.prototype.newInstance = function (rowHasChanged, getStableId) {\n    return new DataProvider(rowHasChanged, getStableId);\n  };\n\n  return DataProvider;\n}(BaseDataProvider);\n\nexports.default = DataProvider;","map":{"version":3,"sources":["../../../../src/core/dependencies/DataProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ts_object_utils_1 = require(\"ts-object-utils\");\n/***\n * You can create a new instance or inherit and override default methods\n * Allows access to data and size. Clone with rows creates a new data provider and let listview know where to calculate row layout from.\n */\nvar BaseDataProvider = /** @class */ (function () {\n    function BaseDataProvider(rowHasChanged, getStableId) {\n        this._firstIndexToProcess = 0;\n        this._size = 0;\n        this._data = [];\n        this._hasStableIds = false;\n        this._requiresDataChangeHandling = false;\n        this.rowHasChanged = rowHasChanged;\n        if (getStableId) {\n            this.getStableId = getStableId;\n            this._hasStableIds = true;\n        }\n        else {\n            this.getStableId = function (index) { return index.toString(); };\n        }\n    }\n    BaseDataProvider.prototype.getDataForIndex = function (index) {\n        return this._data[index];\n    };\n    BaseDataProvider.prototype.getAllData = function () {\n        return this._data;\n    };\n    BaseDataProvider.prototype.getSize = function () {\n        return this._size;\n    };\n    BaseDataProvider.prototype.hasStableIds = function () {\n        return this._hasStableIds;\n    };\n    BaseDataProvider.prototype.requiresDataChangeHandling = function () {\n        return this._requiresDataChangeHandling;\n    };\n    BaseDataProvider.prototype.getFirstIndexToProcessInternal = function () {\n        return this._firstIndexToProcess;\n    };\n    //No need to override this one\n    //If you already know the first row where rowHasChanged will be false pass it upfront to avoid loop\n    BaseDataProvider.prototype.cloneWithRows = function (newData, firstModifiedIndex) {\n        var dp = this.newInstance(this.rowHasChanged, this.getStableId);\n        var newSize = newData.length;\n        var iterCount = Math.min(this._size, newSize);\n        if (ts_object_utils_1.ObjectUtil.isNullOrUndefined(firstModifiedIndex)) {\n            var i = 0;\n            for (i = 0; i < iterCount; i++) {\n                if (this.rowHasChanged(this._data[i], newData[i])) {\n                    break;\n                }\n            }\n            dp._firstIndexToProcess = i;\n        }\n        else {\n            dp._firstIndexToProcess = Math.max(Math.min(firstModifiedIndex, this._data.length), 0);\n        }\n        if (dp._firstIndexToProcess !== this._data.length) {\n            dp._requiresDataChangeHandling = true;\n        }\n        dp._data = newData;\n        dp._size = newSize;\n        return dp;\n    };\n    return BaseDataProvider;\n}());\nexports.BaseDataProvider = BaseDataProvider;\nvar DataProvider = /** @class */ (function (_super) {\n    __extends(DataProvider, _super);\n    function DataProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataProvider.prototype.newInstance = function (rowHasChanged, getStableId) {\n        return new DataProvider(rowHasChanged, getStableId);\n    };\n    return DataProvider;\n}(BaseDataProvider));\nexports.default = DataProvider;\n//# sourceMappingURL=DataProvider.js.map"]},"metadata":{},"sourceType":"script"}