function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import React from'react';import StyleSheet from"react-native-web/dist/exports/StyleSheet";import View from"react-native-web/dist/exports/View";import Text from"react-native-web/dist/exports/Text";import ProductCard from"../../atoms/card/product_card";import{RecyclerListView,DataProvider,LayoutProvider}from"recyclerlistview";import mainStyle from"../../styles/app.css";;export default class CompactList extends React.Component{shouldComponentUpdate(newProps){if(JSON.stringify(newProps.items)==JSON.stringify(this.props.items)){return false;}return true;}constructor(props){super(props);_defineProperty(this,"ref",void 0);_defineProperty(this,"dataProvider",void 0);_defineProperty(this,"layoutProvider",void 0);_defineProperty(this,"_rowRenderer",void 0);this.dataProvider=new DataProvider((a,b)=>{return a!==b;},index=>{return`id_${props.items[index].id}`;});this.layoutProvider=new LayoutProvider(index=>{return 0;},(type,dimension)=>{dimension.height=331;dimension.width=303;});this._rowRenderer=this._prepareItem.bind(this);//Since component should always render once data has changed, make data provider part of the state
this.state={dataProvider:this.dataProvider.cloneWithRows(this.props.items),extendedState:{ids:[]//array of ids
}};}_prepareItem(index,data){return(// <View style={styles.itemContainer}>
React.createElement(ProductCard,{data:data,style:styles.itemContainer,width:291,height:311,callback:this.props.itemCallback})// </View>
);}extractKey(item){return item.id.toString();}getItemLayout(data,index){return{length:291,offset:304*index,index};}render(){return React.createElement(View,{style:[styles.container,this.props.style]},React.createElement(View,{style:styles.heading},React.createElement(View,{style:{flexDirection:"row"}},React.createElement(Text,{className:mainStyle.test,style:styles.heading_text},this.props.title),React.createElement(Text,{style:styles.viewAll},"View All")),this.props.desc&&React.createElement(Text,{style:styles.desc},this.props.desc)),React.createElement(RecyclerListView,{forceNonDeterministicRendering:true,extendedState:this.state.extendedState,isHorizontal:true,style:{flex:1,minHeight:331},layoutProvider:this.layoutProvider,dataProvider:this.state.dataProvider,rowRenderer:this._rowRenderer}));}}_defineProperty(CompactList,"whyDidYouRender",true);const styles=StyleSheet.create({container:{flex:1,minHeight:400,paddingBottom:10},heading:{marginTop:24,marginBottom:20},itemContainer:{// alignContent: "space-around",
justifyContent:"flex-start",flex:1,height:331,backgroundColor:"#0000"},desc:{color:"rgb(84,84,84)",fontSize:16,marginTop:12,fontWeight:"300",fontFamily:"Avenir"},viewAll:{textAlign:"right",flex:1,paddingRight:28,color:"rgb(79, 195, 247)",fontWeight:"400",fontFamily:"Avenir"},heading_text:{fontSize:18,fontWeight:"600",color:"rgb(84,84,84)",lineHeight:28,fontFamily:"Avenir"}});