{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nvar _parseFloat = require(\"@babel/runtime-corejs2/core-js/parse-float\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$create = require(\"@babel/runtime-corejs2/core-js/object/create\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _AnimatedNode = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _AnimatedWithChildren2 = _interopRequireDefault(require(\"./AnimatedWithChildren\"));\n\nvar _NativeAnimatedHelper = _interopRequireDefault(require(\"../NativeAnimatedHelper\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _normalizeCssColor = _interopRequireDefault(require(\"normalize-css-color\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = _Object$create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    var ownKeys = _Object$keys(source);\n\n    if (typeof _Object$getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(_Object$getOwnPropertySymbols(source).filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar linear = function linear(t) {\n  return t;\n};\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = (0, _normalizeCssColor.default)(input);\n\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[0-9\\.-]+/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  (0, _invariant.default)(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread({}, config, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n      var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      return String(rounded);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  (0, _invariant.default)(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically increasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  (0, _invariant.default)(arr.length >= 2, name + ' must have at least 2 elements');\n  (0, _invariant.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation =\n/*#__PURE__*/\nfunction (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedInterpolation, _AnimatedWithChildren); // Export for testing.\n\n\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  var _proto = AnimatedInterpolation.prototype;\n\n  _proto.__makeNative = function __makeNative() {\n    this._parent.__makeNative();\n\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n  };\n\n  _proto.__getValue = function __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  };\n\n  _proto.interpolate = function interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  };\n\n  _proto.__attach = function __attach() {\n    this._parent.__addChild(this);\n  };\n\n  _proto.__detach = function __detach() {\n    this._parent.__removeChild(this);\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__transformDataType = function __transformDataType(range) {\n    // Change the string array type to number array\n    // So we can reuse the same logic in iOS and Android platform\n    return range.map(function (value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      if (/deg$/.test(value)) {\n        var degrees = _parseFloat(value) || 0;\n        var radians = degrees * Math.PI / 180.0;\n        return radians;\n      } else {\n        // Assume radians\n        return _parseFloat(value) || 0;\n      }\n    });\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    if (true) {\n      _NativeAnimatedHelper.default.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  };\n\n  return AnimatedInterpolation;\n}(_AnimatedWithChildren2.default);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nvar _default = AnimatedInterpolation;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/utkarsh/Desktop/headout/ReactNativeOne/node_modules/react-native-web/dist/cjs/vendor/react-native/Animated/nodes/AnimatedInterpolation.js"],"names":["exports","__esModule","default","_AnimatedNode","_interopRequireDefault","require","_AnimatedWithChildren2","_NativeAnimatedHelper","_invariant","_normalizeCssColor","obj","_inheritsLoose","subClass","superClass","prototype","constructor","__proto__","_objectSpread","target","i","arguments","length","source","ownKeys","concat","filter","sym","enumerable","forEach","key","_defineProperty","value","configurable","writable","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","int32Color","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","number","push","interpolations","shouldRound","isRgbOrRgba","replace","val","rounded","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","_AnimatedWithChildren","parent","_this","call","_parent","_config","_interpolation","_proto","__makeNative","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__transformDataType","test","degrees","radians","PI","__getNativeConfig","validateInterpolation","type","__createInterpolation","_default","module"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _AnimatedNode = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _AnimatedWithChildren2 = _interopRequireDefault(require(\"./AnimatedWithChildren\"));\n\nvar _NativeAnimatedHelper = _interopRequireDefault(require(\"../NativeAnimatedHelper\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _normalizeCssColor = _interopRequireDefault(require(\"normalize-css-color\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar linear = function linear(t) {\n  return t;\n};\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {// noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {// noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  } // Input Range\n\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  } // Easing\n\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = (0, _normalizeCssColor.default)(input);\n\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[0-9\\.-]+/g;\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  (0, _invariant.default)(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange); // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread({}, config, {\n      outputRange: outputRanges[i]\n    }));\n  }); // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0; // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n      var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      return String(rounded);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  (0, _invariant.default)(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    (0, _invariant.default)(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically increasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  (0, _invariant.default)(arr.length >= 2, name + ' must have at least 2 elements');\n  (0, _invariant.default)(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation =\n/*#__PURE__*/\nfunction (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedInterpolation, _AnimatedWithChildren);\n\n  // Export for testing.\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  var _proto = AnimatedInterpolation.prototype;\n\n  _proto.__makeNative = function __makeNative() {\n    this._parent.__makeNative();\n\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n  };\n\n  _proto.__getValue = function __getValue() {\n    var parentValue = this._parent.__getValue();\n\n    (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  };\n\n  _proto.interpolate = function interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  };\n\n  _proto.__attach = function __attach() {\n    this._parent.__addChild(this);\n  };\n\n  _proto.__detach = function __detach() {\n    this._parent.__removeChild(this);\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__transformDataType = function __transformDataType(range) {\n    // Change the string array type to number array\n    // So we can reuse the same logic in iOS and Android platform\n    return range.map(function (value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      if (/deg$/.test(value)) {\n        var degrees = parseFloat(value) || 0;\n        var radians = degrees * Math.PI / 180.0;\n        return radians;\n      } else {\n        // Assume radians\n        return parseFloat(value) || 0;\n      }\n    });\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    if (process.env.NODE_ENV !== 'production') {\n      _NativeAnimatedHelper.default.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  };\n\n  return AnimatedInterpolation;\n}(_AnimatedWithChildren2.default);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nvar _default = AnimatedInterpolation;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}