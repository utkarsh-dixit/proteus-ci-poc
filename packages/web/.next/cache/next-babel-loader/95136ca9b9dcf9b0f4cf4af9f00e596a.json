{"ast":null,"code":"\"use strict\";\n\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _ExecutionEnvironment = _interopRequireDefault(require(\"fbjs/lib/ExecutionEnvironment\"));\n\nvar _arrayFindIndex = _interopRequireDefault(require(\"array-find-index\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar connection = _ExecutionEnvironment.default.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection); // Prevent the underlying event handlers from leaking and include additional\n// properties available in browsers\n\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n\n  if (!connection) {\n    return result;\n  }\n\n  for (var prop in connection) {\n    var value = connection[prop];\n\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n\n  return result;\n}; // Map React Native events to browser equivalents\n\n\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\n\nvar eventTypes = _Object$keys(eventTypesMap);\n\nvar connectionListeners = [];\nvar netInfoListeners = [];\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\n\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    var listenerIndex = (0, _arrayFindIndex.default)(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    (0, _invariant.default)(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n        wrappedHandler = _netInfoListeners$lis[1];\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new _Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new _Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var listenerIndex = (0, _arrayFindIndex.default)(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      (0, _invariant.default)(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n          onlineCallback = _connectionListeners$[1],\n          offlineCallback = _connectionListeners$[2];\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new _Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nvar _default = NetInfo;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/utkarsh/Desktop/headout/ReactNativeOne/node_modules/react-native-web/dist/cjs/exports/NetInfo/index.js"],"names":["exports","__esModule","default","_ExecutionEnvironment","_interopRequireDefault","require","_arrayFindIndex","_invariant","obj","connection","canUseDOM","window","navigator","mozConnection","webkitConnection","getConnectionInfoObject","result","effectiveType","type","prop","value","eventTypesMap","change","connectionChange","eventTypes","connectionListeners","netInfoListeners","NetInfo","addEventListener","handler","indexOf","console","warn","error","remove","wrappedHandler","push","removeEventListener","listenerIndex","pair","_netInfoListeners$lis","splice","fetch","resolve","reject","err","getConnectionInfo","isConnected","onlineCallback","offlineCallback","_connectionListeners$","onLine","_default","module"],"mappings":"AAAA;;;;;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,qBAAqB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,+BAAD,CAAR,CAAlD;;AAEA,IAAIC,eAAe,GAAGF,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AAEA,IAAIE,UAAU,GAAGH,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAvC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;AAE/F;;;;;;;;;;;AASA,IAAIC,UAAU,GAAGN,qBAAqB,CAACD,OAAtB,CAA8BQ,SAA9B,KAA4CC,MAAM,CAACC,SAAP,CAAiBH,UAAjB,IAA+BE,MAAM,CAACC,SAAP,CAAiBC,aAAhD,IAAiEF,MAAM,CAACC,SAAP,CAAiBE,gBAA9H,CAAjB,C,CAAkK;AAClK;;AAEA,IAAIC,uBAAuB,GAAG,SAASA,uBAAT,GAAmC;AAC/D,MAAIC,MAAM,GAAG;AACXC,IAAAA,aAAa,EAAE,SADJ;AAEXC,IAAAA,IAAI,EAAE;AAFK,GAAb;;AAKA,MAAI,CAACT,UAAL,EAAiB;AACf,WAAOO,MAAP;AACD;;AAED,OAAK,IAAIG,IAAT,IAAiBV,UAAjB,EAA6B;AAC3B,QAAIW,KAAK,GAAGX,UAAU,CAACU,IAAD,CAAtB;;AAEA,QAAI,OAAOC,KAAP,KAAiB,UAAjB,IAA+BA,KAAK,IAAI,IAA5C,EAAkD;AAChDJ,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeC,KAAf;AACD;AACF;;AAED,SAAOJ,MAAP;AACD,CAnBD,C,CAmBG;;;AAGH,IAAIK,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,QADU;AAElBC,EAAAA,gBAAgB,EAAE;AAFA,CAApB;;AAIA,IAAIC,UAAU,GAAG,aAAYH,aAAZ,CAAjB;;AACA,IAAII,mBAAmB,GAAG,EAA1B;AACA,IAAIC,gBAAgB,GAAG,EAAvB;AACA;;;;;AAKA,IAAIC,OAAO,GAAG;AACZC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BV,IAA1B,EAAgCW,OAAhC,EAAyC;AACzD,KAAC,GAAGtB,UAAU,CAACL,OAAf,EAAwBsB,UAAU,CAACM,OAAX,CAAmBZ,IAAnB,MAA6B,CAAC,CAAtD,EAAyD,4CAAzD,EAAuGA,IAAvG;;AAEA,QAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBa,MAAAA,OAAO,CAACC,IAAR,CAAa,4EAAb;AACD;;AAED,QAAI,CAACvB,UAAL,EAAiB;AACfsB,MAAAA,OAAO,CAACE,KAAR,CAAc,qFAAd;AACA,aAAO;AACLC,QAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB,CAAE;AADvB,OAAP;AAGD;;AAED,QAAIC,cAAc,GAAG,SAASA,cAAT,GAA0B;AAC7C,aAAON,OAAO,CAACd,uBAAuB,EAAxB,CAAd;AACD,KAFD;;AAIAW,IAAAA,gBAAgB,CAACU,IAAjB,CAAsB,CAACP,OAAD,EAAUM,cAAV,CAAtB;AACA1B,IAAAA,UAAU,CAACmB,gBAAX,CAA4BP,aAAa,CAACH,IAAD,CAAzC,EAAiDiB,cAAjD;AACA,WAAO;AACLD,MAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,eAAOP,OAAO,CAACU,mBAAR,CAA4BhB,aAAa,CAACH,IAAD,CAAzC,EAAiDW,OAAjD,CAAP;AACD;AAHI,KAAP;AAKD,GA1BW;AA2BZQ,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BnB,IAA7B,EAAmCW,OAAnC,EAA4C;AAC/D,KAAC,GAAGtB,UAAU,CAACL,OAAf,EAAwBsB,UAAU,CAACM,OAAX,CAAmBZ,IAAnB,MAA6B,CAAC,CAAtD,EAAyD,gDAAzD,EAA2GA,IAA3G;;AAEA,QAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBa,MAAAA,OAAO,CAACC,IAAR,CAAa,4EAAb;AACD;;AAED,QAAIM,aAAa,GAAG,CAAC,GAAGhC,eAAe,CAACJ,OAApB,EAA6BwB,gBAA7B,EAA+C,UAAUa,IAAV,EAAgB;AACjF,aAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYV,OAAnB;AACD,KAFmB,CAApB;AAGA,KAAC,GAAGtB,UAAU,CAACL,OAAf,EAAwBoC,aAAa,KAAK,CAAC,CAA3C,EAA8C,4DAA9C;AACA,QAAIE,qBAAqB,GAAGd,gBAAgB,CAACY,aAAD,CAA5C;AAAA,QACIH,cAAc,GAAGK,qBAAqB,CAAC,CAAD,CAD1C;AAEA/B,IAAAA,UAAU,CAAC4B,mBAAX,CAA+BhB,aAAa,CAACH,IAAD,CAA5C,EAAoDiB,cAApD;AACAT,IAAAA,gBAAgB,CAACe,MAAjB,CAAwBH,aAAxB,EAAuC,CAAvC;AACD,GA1CW;AA2CZI,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBX,IAAAA,OAAO,CAACC,IAAR,CAAa,yDAAb;AACA,WAAO,aAAY,UAAUW,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,UAAI;AACFD,QAAAA,OAAO,CAAClC,UAAU,CAACS,IAAZ,CAAP;AACD,OAFD,CAEE,OAAO2B,GAAP,EAAY;AACZF,QAAAA,OAAO,CAAC,SAAD,CAAP;AACD;AACF,KANM,CAAP;AAOD,GApDW;AAqDZG,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9C,WAAO,aAAY,UAAUH,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CD,MAAAA,OAAO,CAAC5B,uBAAuB,EAAxB,CAAP;AACD,KAFM,CAAP;AAGD,GAzDW;AA0DZgC,EAAAA,WAAW,EAAE;AACXnB,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BV,IAA1B,EAAgCW,OAAhC,EAAyC;AACzD,OAAC,GAAGtB,UAAU,CAACL,OAAf,EAAwBsB,UAAU,CAACM,OAAX,CAAmBZ,IAAnB,MAA6B,CAAC,CAAtD,EAAyD,4CAAzD,EAAuGA,IAAvG;;AAEA,UAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBa,QAAAA,OAAO,CAACC,IAAR,CAAa,4EAAb;AACD;;AAED,UAAIgB,cAAc,GAAG,SAASA,cAAT,GAA0B;AAC7C,eAAOnB,OAAO,CAAC,IAAD,CAAd;AACD,OAFD;;AAIA,UAAIoB,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/C,eAAOpB,OAAO,CAAC,KAAD,CAAd;AACD,OAFD;;AAIAJ,MAAAA,mBAAmB,CAACW,IAApB,CAAyB,CAACP,OAAD,EAAUmB,cAAV,EAA0BC,eAA1B,CAAzB;AACAtC,MAAAA,MAAM,CAACiB,gBAAP,CAAwB,QAAxB,EAAkCoB,cAAlC,EAAkD,KAAlD;AACArC,MAAAA,MAAM,CAACiB,gBAAP,CAAwB,SAAxB,EAAmCqB,eAAnC,EAAoD,KAApD;AACA,aAAO;AACLf,QAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,iBAAOP,OAAO,CAACoB,WAAR,CAAoBV,mBAApB,CAAwChB,aAAa,CAACH,IAAD,CAArD,EAA6DW,OAA7D,CAAP;AACD;AAHI,OAAP;AAKD,KAxBU;AAyBXQ,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BnB,IAA7B,EAAmCW,OAAnC,EAA4C;AAC/D,OAAC,GAAGtB,UAAU,CAACL,OAAf,EAAwBsB,UAAU,CAACM,OAAX,CAAmBZ,IAAnB,MAA6B,CAAC,CAAtD,EAAyD,4CAAzD,EAAuGA,IAAvG;;AAEA,UAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBa,QAAAA,OAAO,CAACC,IAAR,CAAa,4EAAb;AACD;;AAED,UAAIM,aAAa,GAAG,CAAC,GAAGhC,eAAe,CAACJ,OAApB,EAA6BuB,mBAA7B,EAAkD,UAAUc,IAAV,EAAgB;AACpF,eAAOA,IAAI,CAAC,CAAD,CAAJ,KAAYV,OAAnB;AACD,OAFmB,CAApB;AAGA,OAAC,GAAGtB,UAAU,CAACL,OAAf,EAAwBoC,aAAa,KAAK,CAAC,CAA3C,EAA8C,uEAA9C;AACA,UAAIY,qBAAqB,GAAGzB,mBAAmB,CAACa,aAAD,CAA/C;AAAA,UACIU,cAAc,GAAGE,qBAAqB,CAAC,CAAD,CAD1C;AAAA,UAEID,eAAe,GAAGC,qBAAqB,CAAC,CAAD,CAF3C;AAGAvC,MAAAA,MAAM,CAAC0B,mBAAP,CAA2B,QAA3B,EAAqCW,cAArC,EAAqD,KAArD;AACArC,MAAAA,MAAM,CAAC0B,mBAAP,CAA2B,SAA3B,EAAsCY,eAAtC,EAAuD,KAAvD;AACAxB,MAAAA,mBAAmB,CAACgB,MAApB,CAA2BH,aAA3B,EAA0C,CAA1C;AACD,KA1CU;AA2CXI,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,aAAO,aAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,YAAI;AACFD,UAAAA,OAAO,CAAChC,MAAM,CAACC,SAAP,CAAiBuC,MAAlB,CAAP;AACD,SAFD,CAEE,OAAON,GAAP,EAAY;AACZF,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OANM,CAAP;AAOD;AAnDU;AA1DD,CAAd;AAgHA,IAAIS,QAAQ,GAAGzB,OAAf;AACA3B,OAAO,CAACE,OAAR,GAAkBkD,QAAlB;AACAC,MAAM,CAACrD,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _ExecutionEnvironment = _interopRequireDefault(require(\"fbjs/lib/ExecutionEnvironment\"));\n\nvar _arrayFindIndex = _interopRequireDefault(require(\"array-find-index\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar connection = _ExecutionEnvironment.default.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection); // Prevent the underlying event handlers from leaking and include additional\n// properties available in browsers\n\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n\n  if (!connection) {\n    return result;\n  }\n\n  for (var prop in connection) {\n    var value = connection[prop];\n\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n\n  return result;\n}; // Map React Native events to browser equivalents\n\n\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\nvar connectionListeners = [];\nvar netInfoListeners = [];\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\n\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    var listenerIndex = (0, _arrayFindIndex.default)(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    (0, _invariant.default)(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n        wrappedHandler = _netInfoListeners$lis[1];\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var listenerIndex = (0, _arrayFindIndex.default)(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      (0, _invariant.default)(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n          onlineCallback = _connectionListeners$[1],\n          offlineCallback = _connectionListeners$[2];\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nvar _default = NetInfo;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}