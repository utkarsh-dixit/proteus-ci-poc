{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Date$now = require(\"@babel/runtime-corejs2/core-js/date/now\");\n\nexports.__esModule = true;\nexports.default = void 0;\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar dataUriPattern = /^data:/;\n\nvar ImageUriCache =\n/*#__PURE__*/\nfunction () {\n  function ImageUriCache() {}\n\n  ImageUriCache.has = function has(uri) {\n    var entries = ImageUriCache._entries;\n    var isDataUri = dataUriPattern.test(uri);\n    return isDataUri || Boolean(entries[uri]);\n  };\n\n  ImageUriCache.add = function add(uri) {\n    var entries = ImageUriCache._entries;\n\n    var lastUsedTimestamp = _Date$now();\n\n    if (entries[uri]) {\n      entries[uri].lastUsedTimestamp = lastUsedTimestamp;\n      entries[uri].refCount += 1;\n    } else {\n      entries[uri] = {\n        lastUsedTimestamp: lastUsedTimestamp,\n        refCount: 1\n      };\n    }\n  };\n\n  ImageUriCache.remove = function remove(uri) {\n    var entries = ImageUriCache._entries;\n\n    if (entries[uri]) {\n      entries[uri].refCount -= 1;\n    } // Free up entries when the cache is \"full\"\n\n\n    ImageUriCache._cleanUpIfNeeded();\n  };\n\n  ImageUriCache._cleanUpIfNeeded = function _cleanUpIfNeeded() {\n    var entries = ImageUriCache._entries;\n\n    var imageUris = _Object$keys(entries);\n\n    if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\n      var leastRecentlyUsedKey;\n      var leastRecentlyUsedEntry;\n      imageUris.forEach(function (uri) {\n        var entry = entries[uri];\n\n        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\n          leastRecentlyUsedKey = uri;\n          leastRecentlyUsedEntry = entry;\n        }\n      });\n\n      if (leastRecentlyUsedKey) {\n        delete entries[leastRecentlyUsedKey];\n      }\n    }\n  };\n\n  return ImageUriCache;\n}();\n\nexports.default = ImageUriCache;\nImageUriCache._maximumEntries = 256;\nImageUriCache._entries = {};\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/utkarsh/Desktop/headout/ReactNativeOne/node_modules/react-native-web/dist/cjs/exports/Image/ImageUriCache.js"],"names":["exports","__esModule","default","dataUriPattern","ImageUriCache","has","uri","entries","_entries","isDataUri","test","Boolean","add","lastUsedTimestamp","refCount","remove","_cleanUpIfNeeded","imageUris","length","_maximumEntries","leastRecentlyUsedKey","leastRecentlyUsedEntry","forEach","entry","module"],"mappings":"AAAA;;;;;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;;;;;;;;;AAQA,IAAIC,cAAc,GAAG,QAArB;;AAEA,IAAIC,aAAa;AACjB;AACA,YAAY;AACV,WAASA,aAAT,GAAyB,CAAE;;AAE3BA,EAAAA,aAAa,CAACC,GAAd,GAAoB,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACpC,QAAIC,OAAO,GAAGH,aAAa,CAACI,QAA5B;AACA,QAAIC,SAAS,GAAGN,cAAc,CAACO,IAAf,CAAoBJ,GAApB,CAAhB;AACA,WAAOG,SAAS,IAAIE,OAAO,CAACJ,OAAO,CAACD,GAAD,CAAR,CAA3B;AACD,GAJD;;AAMAF,EAAAA,aAAa,CAACQ,GAAd,GAAoB,SAASA,GAAT,CAAaN,GAAb,EAAkB;AACpC,QAAIC,OAAO,GAAGH,aAAa,CAACI,QAA5B;;AACA,QAAIK,iBAAiB,GAAG,WAAxB;;AAEA,QAAIN,OAAO,CAACD,GAAD,CAAX,EAAkB;AAChBC,MAAAA,OAAO,CAACD,GAAD,CAAP,CAAaO,iBAAb,GAAiCA,iBAAjC;AACAN,MAAAA,OAAO,CAACD,GAAD,CAAP,CAAaQ,QAAb,IAAyB,CAAzB;AACD,KAHD,MAGO;AACLP,MAAAA,OAAO,CAACD,GAAD,CAAP,GAAe;AACbO,QAAAA,iBAAiB,EAAEA,iBADN;AAEbC,QAAAA,QAAQ,EAAE;AAFG,OAAf;AAID;AACF,GAbD;;AAeAV,EAAAA,aAAa,CAACW,MAAd,GAAuB,SAASA,MAAT,CAAgBT,GAAhB,EAAqB;AAC1C,QAAIC,OAAO,GAAGH,aAAa,CAACI,QAA5B;;AAEA,QAAID,OAAO,CAACD,GAAD,CAAX,EAAkB;AAChBC,MAAAA,OAAO,CAACD,GAAD,CAAP,CAAaQ,QAAb,IAAyB,CAAzB;AACD,KALyC,CAKxC;;;AAGFV,IAAAA,aAAa,CAACY,gBAAd;AACD,GATD;;AAWAZ,EAAAA,aAAa,CAACY,gBAAd,GAAiC,SAASA,gBAAT,GAA4B;AAC3D,QAAIT,OAAO,GAAGH,aAAa,CAACI,QAA5B;;AACA,QAAIS,SAAS,GAAG,aAAYV,OAAZ,CAAhB;;AAEA,QAAIU,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBd,aAAa,CAACe,eAAzC,EAA0D;AACxD,UAAIC,oBAAJ;AACA,UAAIC,sBAAJ;AACAJ,MAAAA,SAAS,CAACK,OAAV,CAAkB,UAAUhB,GAAV,EAAe;AAC/B,YAAIiB,KAAK,GAAGhB,OAAO,CAACD,GAAD,CAAnB;;AAEA,YAAI,CAAC,CAACe,sBAAD,IAA2BE,KAAK,CAACV,iBAAN,GAA0BQ,sBAAsB,CAACR,iBAA7E,KAAmGU,KAAK,CAACT,QAAN,KAAmB,CAA1H,EAA6H;AAC3HM,UAAAA,oBAAoB,GAAGd,GAAvB;AACAe,UAAAA,sBAAsB,GAAGE,KAAzB;AACD;AACF,OAPD;;AASA,UAAIH,oBAAJ,EAA0B;AACxB,eAAOb,OAAO,CAACa,oBAAD,CAAd;AACD;AACF;AACF,GApBD;;AAsBA,SAAOhB,aAAP;AACD,CA1DD,EAFA;;AA8DAJ,OAAO,CAACE,OAAR,GAAkBE,aAAlB;AACAA,aAAa,CAACe,eAAd,GAAgC,GAAhC;AACAf,aAAa,CAACI,QAAd,GAAyB,EAAzB;AACAgB,MAAM,CAACxB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar dataUriPattern = /^data:/;\n\nvar ImageUriCache =\n/*#__PURE__*/\nfunction () {\n  function ImageUriCache() {}\n\n  ImageUriCache.has = function has(uri) {\n    var entries = ImageUriCache._entries;\n    var isDataUri = dataUriPattern.test(uri);\n    return isDataUri || Boolean(entries[uri]);\n  };\n\n  ImageUriCache.add = function add(uri) {\n    var entries = ImageUriCache._entries;\n    var lastUsedTimestamp = Date.now();\n\n    if (entries[uri]) {\n      entries[uri].lastUsedTimestamp = lastUsedTimestamp;\n      entries[uri].refCount += 1;\n    } else {\n      entries[uri] = {\n        lastUsedTimestamp: lastUsedTimestamp,\n        refCount: 1\n      };\n    }\n  };\n\n  ImageUriCache.remove = function remove(uri) {\n    var entries = ImageUriCache._entries;\n\n    if (entries[uri]) {\n      entries[uri].refCount -= 1;\n    } // Free up entries when the cache is \"full\"\n\n\n    ImageUriCache._cleanUpIfNeeded();\n  };\n\n  ImageUriCache._cleanUpIfNeeded = function _cleanUpIfNeeded() {\n    var entries = ImageUriCache._entries;\n    var imageUris = Object.keys(entries);\n\n    if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\n      var leastRecentlyUsedKey;\n      var leastRecentlyUsedEntry;\n      imageUris.forEach(function (uri) {\n        var entry = entries[uri];\n\n        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\n          leastRecentlyUsedKey = uri;\n          leastRecentlyUsedEntry = entry;\n        }\n      });\n\n      if (leastRecentlyUsedKey) {\n        delete entries[leastRecentlyUsedKey];\n      }\n    }\n  };\n\n  return ImageUriCache;\n}();\n\nexports.default = ImageUriCache;\nImageUriCache._maximumEntries = 256;\nImageUriCache._entries = {};\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}