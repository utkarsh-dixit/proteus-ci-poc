{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_native_1 = require(\"react-native\");\n\nvar ItemAnimator_1 = require(\"../../../../core/ItemAnimator\");\n/**\n * Default implementation of RLV layout animations for react native. These ones are purely JS driven. Also, check out DefaultNativeItemAnimator\n * for an implementation on top of LayoutAnimation. We didn't use it by default due the fact that LayoutAnimation is quite\n * unstable on Android and to avoid unnecessary interference with developer flow. It would be very easy to do so manually if\n * you need to. Check DefaultNativeItemAnimator for inspiration. LayoutAnimation definitely gives better performance but is\n * hardly customizable.\n */\n\n\nvar DefaultJSItemAnimator =\n/** @class */\nfunction () {\n  function DefaultJSItemAnimator() {\n    this.shouldAnimateOnce = true;\n    this._hasAnimatedOnce = false;\n    this._isTimerOn = false;\n  }\n\n  DefaultJSItemAnimator.prototype.animateWillMount = function (atX, atY, itemIndex) {\n    return undefined;\n  };\n\n  DefaultJSItemAnimator.prototype.animateDidMount = function (atX, atY, itemRef, itemIndex) {//no need\n  };\n\n  DefaultJSItemAnimator.prototype.animateWillUpdate = function (fromX, fromY, toX, toY, itemRef, itemIndex) {\n    this._hasAnimatedOnce = true;\n  };\n\n  DefaultJSItemAnimator.prototype.animateShift = function (fromX, fromY, toX, toY, itemRef, itemIndex) {\n    var _this = this;\n\n    if (fromX !== toX || fromY !== toY) {\n      if (!this.shouldAnimateOnce || this.shouldAnimateOnce && !this._hasAnimatedOnce) {\n        var viewRef_1 = itemRef;\n        var animXY_1 = new react_native_1.Animated.ValueXY({\n          x: fromX,\n          y: fromY\n        });\n        animXY_1.addListener(function (value) {\n          if (viewRef_1._isUnmountedForRecyclerListView || _this.shouldAnimateOnce && _this._hasAnimatedOnce) {\n            animXY_1.stopAnimation();\n            return;\n          }\n\n          viewRef_1.setNativeProps(_this._getNativePropObject(value.x, value.y));\n        });\n\n        if (viewRef_1._lastAnimVal) {\n          viewRef_1._lastAnimVal.stopAnimation();\n        }\n\n        viewRef_1._lastAnimVal = animXY_1;\n        react_native_1.Animated.timing(animXY_1, {\n          toValue: {\n            x: toX,\n            y: toY\n          },\n          duration: 200,\n          easing: react_native_1.Easing.out(react_native_1.Easing.ease),\n          useNativeDriver: ItemAnimator_1.BaseItemAnimator.USE_NATIVE_DRIVER\n        }).start(function () {\n          viewRef_1._lastAnimVal = null;\n          _this._hasAnimatedOnce = true;\n        });\n        return true;\n      }\n    } else {\n      if (!this._isTimerOn) {\n        this._isTimerOn = true;\n\n        if (!this._hasAnimatedOnce) {\n          setTimeout(function () {\n            _this._hasAnimatedOnce = true;\n          }, 1000);\n        }\n      }\n    }\n\n    return false;\n  };\n\n  DefaultJSItemAnimator.prototype.animateWillUnmount = function (atX, atY, itemRef, itemIndex) {\n    itemRef._isUnmountedForRecyclerListView = true;\n  };\n\n  DefaultJSItemAnimator.prototype._getNativePropObject = function (x, y) {\n    return {\n      style: {\n        left: x,\n        top: y\n      }\n    };\n  };\n\n  return DefaultJSItemAnimator;\n}();\n\nexports.DefaultJSItemAnimator = DefaultJSItemAnimator;","map":{"version":3,"sources":["../../../../../../src/platform/reactnative/itemanimators/defaultjsanimator/DefaultJSItemAnimator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_native_1 = require(\"react-native\");\nvar ItemAnimator_1 = require(\"../../../../core/ItemAnimator\");\n/**\n * Default implementation of RLV layout animations for react native. These ones are purely JS driven. Also, check out DefaultNativeItemAnimator\n * for an implementation on top of LayoutAnimation. We didn't use it by default due the fact that LayoutAnimation is quite\n * unstable on Android and to avoid unnecessary interference with developer flow. It would be very easy to do so manually if\n * you need to. Check DefaultNativeItemAnimator for inspiration. LayoutAnimation definitely gives better performance but is\n * hardly customizable.\n */\nvar DefaultJSItemAnimator = /** @class */ (function () {\n    function DefaultJSItemAnimator() {\n        this.shouldAnimateOnce = true;\n        this._hasAnimatedOnce = false;\n        this._isTimerOn = false;\n    }\n    DefaultJSItemAnimator.prototype.animateWillMount = function (atX, atY, itemIndex) {\n        return undefined;\n    };\n    DefaultJSItemAnimator.prototype.animateDidMount = function (atX, atY, itemRef, itemIndex) {\n        //no need\n    };\n    DefaultJSItemAnimator.prototype.animateWillUpdate = function (fromX, fromY, toX, toY, itemRef, itemIndex) {\n        this._hasAnimatedOnce = true;\n    };\n    DefaultJSItemAnimator.prototype.animateShift = function (fromX, fromY, toX, toY, itemRef, itemIndex) {\n        var _this = this;\n        if (fromX !== toX || fromY !== toY) {\n            if (!this.shouldAnimateOnce || this.shouldAnimateOnce && !this._hasAnimatedOnce) {\n                var viewRef_1 = itemRef;\n                var animXY_1 = new react_native_1.Animated.ValueXY({ x: fromX, y: fromY });\n                animXY_1.addListener(function (value) {\n                    if (viewRef_1._isUnmountedForRecyclerListView || (_this.shouldAnimateOnce && _this._hasAnimatedOnce)) {\n                        animXY_1.stopAnimation();\n                        return;\n                    }\n                    viewRef_1.setNativeProps(_this._getNativePropObject(value.x, value.y));\n                });\n                if (viewRef_1._lastAnimVal) {\n                    viewRef_1._lastAnimVal.stopAnimation();\n                }\n                viewRef_1._lastAnimVal = animXY_1;\n                react_native_1.Animated.timing(animXY_1, {\n                    toValue: { x: toX, y: toY },\n                    duration: 200,\n                    easing: react_native_1.Easing.out(react_native_1.Easing.ease),\n                    useNativeDriver: ItemAnimator_1.BaseItemAnimator.USE_NATIVE_DRIVER,\n                }).start(function () {\n                    viewRef_1._lastAnimVal = null;\n                    _this._hasAnimatedOnce = true;\n                });\n                return true;\n            }\n        }\n        else {\n            if (!this._isTimerOn) {\n                this._isTimerOn = true;\n                if (!this._hasAnimatedOnce) {\n                    setTimeout(function () {\n                        _this._hasAnimatedOnce = true;\n                    }, 1000);\n                }\n            }\n        }\n        return false;\n    };\n    DefaultJSItemAnimator.prototype.animateWillUnmount = function (atX, atY, itemRef, itemIndex) {\n        itemRef._isUnmountedForRecyclerListView = true;\n    };\n    DefaultJSItemAnimator.prototype._getNativePropObject = function (x, y) {\n        return { style: { left: x, top: y } };\n    };\n    return DefaultJSItemAnimator;\n}());\nexports.DefaultJSItemAnimator = DefaultJSItemAnimator;\n//# sourceMappingURL=DefaultJSItemAnimator.js.map"]},"metadata":{},"sourceType":"script"}