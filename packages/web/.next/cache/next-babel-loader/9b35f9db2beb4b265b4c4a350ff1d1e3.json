{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CustomError_1 = require(\"../core/exceptions/CustomError\");\n\nvar BinarySearch =\n/** @class */\nfunction () {\n  function BinarySearch() {}\n\n  BinarySearch.findClosestHigherValueIndex = function (size, targetValue, valueExtractor) {\n    var low = 0;\n    var high = size - 1;\n    var mid = Math.floor((low + high) / 2);\n    var lastValue = 0;\n    var absoluteLastDiff = Math.abs(valueExtractor(mid) - targetValue);\n    var result = mid;\n    var diff = 0;\n    var absoluteDiff = 0;\n\n    if (absoluteLastDiff === 0) {\n      return result;\n    }\n\n    if (high < 0) {\n      throw new CustomError_1.default({\n        message: \"The collection cannot be empty\",\n        type: \"InvalidStateException\"\n      });\n    }\n\n    while (low <= high) {\n      mid = Math.floor((low + high) / 2);\n      lastValue = valueExtractor(mid);\n      diff = lastValue - targetValue;\n      absoluteDiff = Math.abs(diff);\n\n      if (diff >= 0 && absoluteDiff < absoluteLastDiff) {\n        absoluteLastDiff = absoluteDiff;\n        result = mid;\n      }\n\n      if (targetValue < lastValue) {\n        high = mid - 1;\n      } else if (targetValue > lastValue) {\n        low = mid + 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return result;\n  };\n\n  BinarySearch.findClosestValueToTarget = function (values, target) {\n    var low = 0;\n    var high = values.length - 1;\n    var mid = Math.floor((low + high) / 2);\n    var midValue = values[mid];\n    var lastMidValue = midValue + 1;\n\n    while (low <= high && midValue !== lastMidValue) {\n      if (midValue === target) {\n        break;\n      } else if (midValue < target) {\n        low = mid;\n      } else if (midValue > target) {\n        high = mid;\n      }\n\n      mid = Math.floor((low + high) / 2);\n      lastMidValue = midValue;\n      midValue = values[mid];\n    }\n\n    return {\n      value: midValue,\n      index: mid\n    };\n  };\n  /**\n   * Largest value from given values that is smaller or equal to the target number.\n   */\n\n\n  BinarySearch.findValueSmallerThanTarget = function (values, target) {\n    var low = 0;\n    var high = values.length - 1;\n\n    if (target > values[high]) {\n      return {\n        value: values[high],\n        index: high\n      };\n    } else if (target < values[low]) {\n      return undefined;\n    }\n\n    var midValueAndIndex = this.findClosestValueToTarget(values, target);\n    var midValue = midValueAndIndex.value;\n    var mid = midValueAndIndex.index;\n\n    if (midValue <= target) {\n      return {\n        value: midValue,\n        index: mid\n      };\n    } else {\n      return {\n        value: values[mid - 1],\n        index: mid - 1\n      };\n    }\n  };\n  /**\n   * Smallest value from given values that is larger or equal to the target number.\n   */\n\n\n  BinarySearch.findValueLargerThanTarget = function (values, target) {\n    var low = 0;\n    var high = values.length - 1;\n\n    if (target < values[low]) {\n      return {\n        value: values[low],\n        index: low\n      };\n    } else if (target > values[high]) {\n      return undefined;\n    }\n\n    var midValueAndIndex = this.findClosestValueToTarget(values, target);\n    var midValue = midValueAndIndex.value;\n    var mid = midValueAndIndex.index;\n\n    if (midValue >= target) {\n      return {\n        value: midValue,\n        index: mid\n      };\n    } else {\n      return {\n        value: values[mid + 1],\n        index: mid + 1\n      };\n    }\n  };\n\n  BinarySearch.findIndexOf = function (array, value) {\n    var j = 0;\n    var length = array.length;\n    var i = 0;\n\n    while (j < length) {\n      i = length + j - 1 >> 1;\n\n      if (value > array[i]) {\n        j = i + 1;\n      } else if (value < array[i]) {\n        length = i;\n      } else {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  return BinarySearch;\n}();\n\nexports.default = BinarySearch;","map":{"version":3,"sources":["../../../src/utils/BinarySearch.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CustomError_1 = require(\"../core/exceptions/CustomError\");\nvar BinarySearch = /** @class */ (function () {\n    function BinarySearch() {\n    }\n    BinarySearch.findClosestHigherValueIndex = function (size, targetValue, valueExtractor) {\n        var low = 0;\n        var high = size - 1;\n        var mid = Math.floor((low + high) / 2);\n        var lastValue = 0;\n        var absoluteLastDiff = Math.abs(valueExtractor(mid) - targetValue);\n        var result = mid;\n        var diff = 0;\n        var absoluteDiff = 0;\n        if (absoluteLastDiff === 0) {\n            return result;\n        }\n        if (high < 0) {\n            throw new CustomError_1.default({\n                message: \"The collection cannot be empty\",\n                type: \"InvalidStateException\",\n            });\n        }\n        while (low <= high) {\n            mid = Math.floor((low + high) / 2);\n            lastValue = valueExtractor(mid);\n            diff = lastValue - targetValue;\n            absoluteDiff = Math.abs(diff);\n            if (diff >= 0 && absoluteDiff < absoluteLastDiff) {\n                absoluteLastDiff = absoluteDiff;\n                result = mid;\n            }\n            if (targetValue < lastValue) {\n                high = mid - 1;\n            }\n            else if (targetValue > lastValue) {\n                low = mid + 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return result;\n    };\n    BinarySearch.findClosestValueToTarget = function (values, target) {\n        var low = 0;\n        var high = values.length - 1;\n        var mid = Math.floor((low + high) / 2);\n        var midValue = values[mid];\n        var lastMidValue = midValue + 1;\n        while (low <= high && midValue !== lastMidValue) {\n            if (midValue === target) {\n                break;\n            }\n            else if (midValue < target) {\n                low = mid;\n            }\n            else if (midValue > target) {\n                high = mid;\n            }\n            mid = Math.floor((low + high) / 2);\n            lastMidValue = midValue;\n            midValue = values[mid];\n        }\n        return {\n            value: midValue,\n            index: mid,\n        };\n    };\n    /**\n     * Largest value from given values that is smaller or equal to the target number.\n     */\n    BinarySearch.findValueSmallerThanTarget = function (values, target) {\n        var low = 0;\n        var high = values.length - 1;\n        if (target > values[high]) {\n            return {\n                value: values[high],\n                index: high,\n            };\n        }\n        else if (target < values[low]) {\n            return undefined;\n        }\n        var midValueAndIndex = this.findClosestValueToTarget(values, target);\n        var midValue = midValueAndIndex.value;\n        var mid = midValueAndIndex.index;\n        if (midValue <= target) {\n            return {\n                value: midValue,\n                index: mid,\n            };\n        }\n        else {\n            return {\n                value: values[mid - 1],\n                index: mid - 1,\n            };\n        }\n    };\n    /**\n     * Smallest value from given values that is larger or equal to the target number.\n     */\n    BinarySearch.findValueLargerThanTarget = function (values, target) {\n        var low = 0;\n        var high = values.length - 1;\n        if (target < values[low]) {\n            return {\n                value: values[low],\n                index: low,\n            };\n        }\n        else if (target > values[high]) {\n            return undefined;\n        }\n        var midValueAndIndex = this.findClosestValueToTarget(values, target);\n        var midValue = midValueAndIndex.value;\n        var mid = midValueAndIndex.index;\n        if (midValue >= target) {\n            return {\n                value: midValue,\n                index: mid,\n            };\n        }\n        else {\n            return {\n                value: values[mid + 1],\n                index: mid + 1,\n            };\n        }\n    };\n    BinarySearch.findIndexOf = function (array, value) {\n        var j = 0;\n        var length = array.length;\n        var i = 0;\n        while (j < length) {\n            i = length + j - 1 >> 1;\n            if (value > array[i]) {\n                j = i + 1;\n            }\n            else if (value < array[i]) {\n                length = i;\n            }\n            else {\n                return i;\n            }\n        }\n        return -1;\n    };\n    return BinarySearch;\n}());\nexports.default = BinarySearch;\n//# sourceMappingURL=BinarySearch.js.map"]},"metadata":{},"sourceType":"script"}