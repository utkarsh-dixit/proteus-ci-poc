{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/***\n * Context provider is useful in cases where your view gets destroyed and you want to maintain scroll position when recyclerlistview is recreated e.g,\n * back navigation in android when previous fragments onDestroyView has already been called. Since recyclerlistview only renders visible items you\n * can instantly jump to any location.\n *\n * Use this interface and implement the given methods to preserve context.\n */\n\n\nvar ContextProvider =\n/** @class */\nfunction () {\n  function ContextProvider() {}\n\n  return ContextProvider;\n}();\n\nexports.default = ContextProvider;","map":{"version":3,"sources":["../../../../src/core/dependencies/ContextProvider.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;AAOA,IAAA,eAAA;AAAA;AAAA,YAAA;AAAA,WAAA,eAAA,GAAA,CAYC;;AAAD,SAAA,eAAA;AAAC,CAZD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/***\n * Context provider is useful in cases where your view gets destroyed and you want to maintain scroll position when recyclerlistview is recreated e.g,\n * back navigation in android when previous fragments onDestroyView has already been called. Since recyclerlistview only renders visible items you\n * can instantly jump to any location.\n *\n * Use this interface and implement the given methods to preserve context.\n */\nvar ContextProvider = /** @class */ (function () {\n    function ContextProvider() {\n    }\n    return ContextProvider;\n}());\nexports.default = ContextProvider;\n//# sourceMappingURL=ContextProvider.js.map"]},"metadata":{},"sourceType":"script"}