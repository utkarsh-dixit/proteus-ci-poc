{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _createDOMProps = _interopRequireDefault(require(\"../createDOMProps\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../../exports/findNodeHandle\"));\n\nvar _styleResolver = _interopRequireDefault(require(\"../../exports/StyleSheet/styleResolver\"));\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar NativeMethodsMixin = {\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n  blur: function blur() {\n    _UIManager.default.blur((0, _findNodeHandle.default)(this));\n  },\n\n  /**\n   * Requests focus for the given input or view.\n   * The exact behavior triggered will depend the type of view.\n   */\n  focus: function focus() {\n    _UIManager.default.focus((0, _findNodeHandle.default)(this));\n  },\n\n  /**\n   * Determines the position and dimensions of the view\n   */\n  measure: function measure(callback) {\n    _UIManager.default.measure((0, _findNodeHandle.default)(this), callback);\n  },\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed.\n   */\n  measureInWindow: function measureInWindow(callback) {\n    _UIManager.default.measureInWindow((0, _findNodeHandle.default)(this), callback);\n  },\n\n  /**\n   * Measures the view relative to another view (usually an ancestor)\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    _UIManager.default.measureLayout((0, _findNodeHandle.default)(this), relativeToNativeNode, onFail, onSuccess);\n  },\n\n  /**\n   * This function sends props straight to the underlying DOM node.\n   * This works as if all styles were set as inline styles. Since a DOM node\n   * may aleady be styled with class names and inline styles, we need to get\n   * the initial styles from the DOM node and merge them with incoming props.\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = (0, _findNodeHandle.default)(this);\n\n    if (node) {\n      // Next state is determined by comparison to existing state (in the DOM).\n      // Existing state has already gone through i18n transform\n      var domProps = (0, _createDOMProps.default)(null, nativeProps, function (style) {\n        return _styleResolver.default.resolveWithNode(style, node);\n      });\n\n      _UIManager.default.updateView(node, domProps, this);\n    }\n  }\n};\nvar _default = NativeMethodsMixin;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/utkarsh/Desktop/headout/ReactNativeOne/node_modules/react-native-web/dist/cjs/modules/NativeMethodsMixin/index.js"],"names":["exports","__esModule","default","_createDOMProps","_interopRequireDefault","require","_findNodeHandle","_styleResolver","_UIManager","obj","NativeMethodsMixin","blur","focus","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","node","domProps","style","resolveWithNode","updateView","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _createDOMProps = _interopRequireDefault(require(\"../createDOMProps\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../../exports/findNodeHandle\"));\n\nvar _styleResolver = _interopRequireDefault(require(\"../../exports/StyleSheet/styleResolver\"));\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar NativeMethodsMixin = {\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n  blur: function blur() {\n    _UIManager.default.blur((0, _findNodeHandle.default)(this));\n  },\n\n  /**\n   * Requests focus for the given input or view.\n   * The exact behavior triggered will depend the type of view.\n   */\n  focus: function focus() {\n    _UIManager.default.focus((0, _findNodeHandle.default)(this));\n  },\n\n  /**\n   * Determines the position and dimensions of the view\n   */\n  measure: function measure(callback) {\n    _UIManager.default.measure((0, _findNodeHandle.default)(this), callback);\n  },\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed.\n   */\n  measureInWindow: function measureInWindow(callback) {\n    _UIManager.default.measureInWindow((0, _findNodeHandle.default)(this), callback);\n  },\n\n  /**\n   * Measures the view relative to another view (usually an ancestor)\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    _UIManager.default.measureLayout((0, _findNodeHandle.default)(this), relativeToNativeNode, onFail, onSuccess);\n  },\n\n  /**\n   * This function sends props straight to the underlying DOM node.\n   * This works as if all styles were set as inline styles. Since a DOM node\n   * may aleady be styled with class names and inline styles, we need to get\n   * the initial styles from the DOM node and merge them with incoming props.\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = (0, _findNodeHandle.default)(this);\n\n    if (node) {\n      // Next state is determined by comparison to existing state (in the DOM).\n      // Existing state has already gone through i18n transform\n      var domProps = (0, _createDOMProps.default)(null, nativeProps, function (style) {\n        return _styleResolver.default.resolveWithNode(style, node);\n      });\n\n      _UIManager.default.updateView(node, domProps, this);\n    }\n  }\n};\nvar _default = NativeMethodsMixin;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}